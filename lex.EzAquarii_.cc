#define yyFlexLexer EzAquarii_FlexLexer

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 24
#define YY_END_OF_BUFFER 25
static yyconst short int yy_accept[340] =
    {   0,
        0,    0,   25,   23,    6,    5,    9,   15,   11,   23,
        1,    2,   15,   15,    4,   15,    7,   15,   20,    3,
        8,   14,    8,   23,   19,   19,   19,   16,   11,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   11,    8,
       14,    9,    0,   10,   20,    0,    0,   20,   11,   13,
       19,    0,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   17,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       22,    0,    0,    0,    0,    0,   21,    0,    0,    0,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   12,    0,    0,   18,    0,   19,
       19,   19,   19,   17,   19,   19,   19,   19,   19,   19,
       19,   17,   19,   19,   19,   19,   17,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,    0,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,    0,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   17,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   17,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   19,   19,   23,   19,   19,   19,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   31,   31,   32,   33,
       31,   31,   31,   31,   31,   34,   31,   31,   31,   31,
       31,   35,   36,   37,   38,   31,   31,   31,   31,   31,
       39,    1,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   31,   52,   53,   54,   55,
       56,   57,   31,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    2,    2,    2,    3,    3,    3,    3,    3,    1,
        1,    1,    4,    5,    3,    5,    3,    3,    6,    6,
        6,    6,    6,    1,    3,    3,    3,    3,    1,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    7,    8,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    3,    1,    3
    } ;

static yyconst short int yy_base[346] =
    {   0,
        0,    0,  802,  832,  832,  832,  774,  773,  790,    0,
      832,  832,  771,   57,  832,   66,  832,   68,   77,  832,
       46,  770,   47,  771,  753,   53,   66,  832,  832,   51,
       63,   64,   69,   74,   70,   76,   85,   79,   98,  100,
       91,   92,   97,  107,  113,  110,  123,  127,  723,  832,
      832,  832,  573,  832,  163,  185,  171,  192,  832,  832,
      543,  202,   72,  116,  125,  142,  171,  112,  156,  178,
      187,  189,  180,  181,  136,  188,   83,  194,  197,  200,
      201,  202,  203,  212,  205,  206,  209,  207,  208,  210,
      225,  213,  229,  230,  231,  238,  232,  235,  239,  240,

      241,  251,  246,  253,  254,  255,  257,  261,  268,  265,
      832,  317,  232,  303,    0,  339,  325,  344,  349,  162,
      293,  295,  334,  318,  264,  311,  337,  336,  338,  269,
      339,  343,  340,  312,  349,  346,  341,  296,  355,  358,
      361,  351,  352,  365,  244,  366,  371,  367,  372,  374,
      373,  376,  377,  378,  382,  380,  381,  383,  387,  384,
      394,  388,  385,  401,  407,  404,  408,  410,  411,  413,
      419,  414,  428,  417,  832,  472,    0,  832,  160,  430,
      429,  420,  439,  457,  441,  442,  448,  443,  451,  444,
      459,  497,  464,  466,  467,  468,  134,  470,  473,  469,

      471,  475,  479,  480,  482,  487,  491,  492,  481,  494,
      496,  498,  499,  507,  504,  505,  508,  509,  518,  500,
      521,  510,  515,  529,  527,  530,  531,  532,  538,  552,
      553,  541,  534,  546,  556,  547,   94,  560,  545,  558,
      562,  563,  567,  568,  569,  571,  572,  573,  574,  578,
      575,  579,  582,  586,  588,  583,  591,  595,  599,  600,
      602,  603,  605,  613,  606,  614,  607,  620,  608,  615,
      626,  627,  621,  625,  631,   43,  632,  633,  634,  635,
      636,  639,  640,  642,  645,  648,  647,  649,  654,  657,
      658,  659,  660,  662,  665,  667,  669,  675,  832,  670,

      676,  671,  679,  681,  680,  684,  690,  685,  687,  695,
      697,  700,  705,  706,  709,  707,  710,  713,  712,  715,
      720,  718,  721,  725,  722,  723,  724,  727,  733,  734,
      736,  735,  743,  740,  745,  747,  749,  750,  832,  808,
      809,  815,  817,  822,  823
    } ;

static yyconst short int yy_def[346] =
    {   0,
      339,    1,  339,  339,  339,  339,  339,  339,  339,  340,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  341,  341,  341,  339,  339,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  339,  339,
      339,  339,  339,  339,  339,  342,  339,  339,  339,  339,
      341,  343,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      339,  342,  339,  339,  112,  344,  339,  339,  339,  345,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  339,  344,  176,  339,  345,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  339,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  339,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  339,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,    0,  339,
      339,  339,  339,  339,  339
    } ;

static yyconst short int yy_nxt[903] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,    4,   20,   21,   22,   23,   24,   25,
       25,   25,   26,   25,   25,   25,   27,   25,   28,   28,
       29,   25,   30,   31,   32,   33,   34,   35,   36,   25,
       37,   25,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   25,   25,   25,   28,   49,   28,   29,
       54,   59,   50,   50,   59,   55,   55,   55,   55,   55,
       56,   54,   63,   51,   55,   55,   55,   55,   55,   62,
      299,   62,   51,   57,   51,   58,   58,   58,   58,   58,

       64,   62,   62,   65,   62,  121,   70,   62,   62,   66,
       62,   67,   62,   71,   62,   74,   72,   62,   68,   73,
       69,   62,   80,   62,   75,   81,   77,   82,   78,   62,
       62,   83,   84,   76,   86,   62,   62,   79,   62,   85,
       87,  136,   89,   96,  276,   62,   90,   93,   62,   94,
       62,   62,   95,  122,   62,   91,   97,   98,   88,  101,
       92,   62,  102,   62,  105,   62,   99,  125,  106,  100,
      103,  109,   62,  107,   62,  123,  110,  104,  108,   57,
       62,   58,   58,   58,   58,   58,  112,  112,  112,  117,
      117,  117,  117,  117,   62,   84,  134,  113,  114,  178,

      114,  178,  126,  115,  115,  115,  115,  115,   57,   62,
       58,   58,   58,   58,   58,  118,   62,  118,   62,   62,
      119,  119,  119,  119,  119,   62,   62,   62,  132,  129,
      124,  130,   62,  133,  131,   62,  127,  128,   62,   62,
       62,   62,  135,   62,   62,   62,   62,   62,   62,  175,
       62,   62,  141,  138,  137,  140,  139,  143,   84,  145,
      144,  147,  142,   62,   84,  149,  146,   62,   62,   62,
       62,  148,   84,   62,  153,  150,   62,   62,   62,   62,
      151,  160,   62,  158,   62,  152,  154,  157,  155,   62,
      162,   62,   62,   62,  163,   62,  161,  156,   84,   62,

      159,  164,   62,   62,  167,  169,   62,   62,  165,  166,
       84,  171,  168,  172,  170,  174,   84,  173,  112,  112,
      112,  115,  115,  115,  115,  115,   84,  185,  180,  113,
      114,   62,  114,   62,   62,  115,  115,  115,  115,  115,
      112,  112,  112,  117,  117,  117,  117,  117,  193,   62,
       62,  113,  114,  182,  114,  190,   62,  176,  176,  176,
      176,  176,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,   62,   84,   62,   62,   62,   62,   62,   62,
      183,   62,  181,   84,   62,  188,  189,   62,  178,   62,
       62,  191,  192,   62,   84,  184,   62,  186,  187,   62,

      195,  194,  198,   62,   62,   62,  197,  196,  199,   62,
       62,   62,   62,   84,   62,   62,   62,  200,   62,   62,
       62,   62,   62,   62,  202,   62,   62,  204,  208,  207,
      201,  203,   62,  213,  205,  206,  209,  212,  211,   62,
      210,  218,   62,  214,  215,   62,   62,  217,   62,   62,
      221,   62,   62,  219,  216,   62,  226,   62,   62,   84,
      223,   84,  220,  222,   84,  224,   62,   62,   62,  228,
      227,   84,  225,  112,  112,  112,  230,   62,  231,   62,
       62,   62,   62,  229,  113,  114,   62,  114,   84,   62,
      176,  176,  176,  176,  176,   62,  235,   62,  232,   84,

      237,   84,   62,  233,   62,   62,   62,   62,   62,   62,
      234,   62,  236,   62,  238,  244,  242,   62,   62,   62,
       62,  246,  240,  239,  241,   62,   84,  243,  248,   62,
       62,  245,   62,  249,   62,   62,   62,   62,   62,  247,
      252,  250,   62,   62,  254,   62,   62,   62,   62,  258,
      251,  253,  259,   62,  255,   84,   62,  256,  257,   62,
      261,  260,   84,  265,   84,   62,  262,   62,   62,   62,
       62,  263,   62,  272,  271,  264,   62,   84,   84,   62,
      269,   62,  111,   62,   62,   62,  274,  266,  268,  267,
       62,   62,   84,  270,   62,  273,   62,  275,   62,   84,

       62,   62,   84,   84,  277,   62,   62,   62,  197,   62,
       62,   62,   62,   62,  280,  278,   62,   62,  283,   84,
       62,   62,   84,  279,   62,  285,   62,  286,  281,   62,
      282,   84,   84,   62,  284,   84,   84,   62,   62,   84,
       62,   62,  287,   62,   62,   62,   62,  288,   84,  289,
       84,   62,   62,   62,   84,  290,  292,  293,   62,   62,
      291,  294,   84,   62,   62,   62,   84,  295,  296,   62,
       62,   62,   62,   62,   62,  298,  301,   62,   62,   84,
       62,  297,  300,   62,  197,   62,   62,   62,  305,  307,
      309,  302,   62,   84,  303,   62,   62,   62,   62,  304,

       62,  197,  306,   62,  311,   62,  308,   62,   62,   62,
      310,  197,  312,   62,   62,   84,  313,   62,   62,   62,
      314,   84,   62,   62,   84,   62,   84,  315,   62,   84,
       84,   84,  317,   62,  318,   62,   84,   84,   62,  319,
      316,   84,   84,   62,   62,   62,   84,   62,   62,  320,
       62,   62,   84,   62,   84,  323,   62,  325,   62,   62,
       62,   62,   62,   62,  321,   62,  326,  324,  322,  329,
      332,   62,   62,   62,   62,  333,  327,  334,   62,  328,
      330,   62,  331,   62,  336,   62,   84,   62,   62,  337,
       52,   62,  335,   84,   60,   84,   50,   51,   52,   51,

       50,  339,  339,  339,   84,  339,  339,  338,  339,   84,
       53,   53,   53,   53,   61,   61,  116,  339,  116,  116,
      116,  120,  120,  177,  339,  177,  177,  177,  179,  339,
      179,    3,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339
    } ;

static yyconst short int yy_chk[903] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       14,   21,   21,   23,   23,   14,   14,   14,   14,   14,
       18,   16,   26,   14,   16,   16,   16,   16,   16,   30,
      276,   26,   16,   19,   18,   19,   19,   19,   19,   19,

       27,   31,   32,   30,   27,   63,   32,   33,   35,   30,
       63,   30,   34,   32,   36,   33,   32,   38,   31,   32,
       31,   77,   35,   37,   33,   35,   34,   35,   34,   41,
       42,   36,   37,   33,   38,   43,   39,   34,   40,   37,
       39,   77,   40,   43,  237,   44,   40,   41,   46,   42,
       68,   45,   42,   64,   64,   40,   44,   44,   39,   45,
       40,   47,   45,   65,   46,   48,   44,   68,   46,   44,
       45,   48,  197,   47,   75,   65,   48,   45,   47,   55,
       66,   55,   55,   55,   55,   55,   56,   56,   56,   57,
       57,   57,   57,   57,   69,   66,   75,   56,   56,  179,

       56,  120,   69,   56,   56,   56,   56,   56,   58,   67,
       58,   58,   58,   58,   58,   62,   70,   62,   73,   74,
       62,   62,   62,   62,   62,   71,   76,   72,   74,   71,
       67,   72,   78,   74,   73,   79,   70,   70,   80,   81,
       82,   83,   76,   85,   86,   88,   89,   87,   90,  113,
       84,   92,   82,   79,   78,   80,   79,   85,   81,   87,
       86,   89,   83,   91,   85,   92,   88,   93,   94,   95,
       97,   91,   90,   98,   95,   93,   96,   99,  100,  101,
       94,   99,  145,   98,  103,   94,   96,   97,   96,  102,
      100,  104,  105,  106,  101,  107,   99,   96,  145,  108,

       98,  102,  125,  110,  105,  106,  109,  130,  102,  104,
      103,  108,  105,  108,  107,  110,  125,  109,  112,  112,
      112,  114,  114,  114,  114,  114,  122,  130,  121,  112,
      112,  121,  112,  122,  138,  112,  112,  112,  112,  112,
      116,  116,  116,  117,  117,  117,  117,  117,  138,  126,
      134,  116,  116,  126,  116,  134,  124,  116,  116,  116,
      116,  116,  118,  118,  118,  118,  118,  119,  119,  119,
      119,  119,  123,  124,  128,  127,  129,  131,  133,  137,
      128,  132,  123,  127,  136,  132,  133,  135,  119,  142,
      143,  135,  136,  139,  137,  129,  140,  131,  131,  141,

      140,  139,  143,  144,  146,  148,  142,  141,  146,  147,
      149,  151,  150,  144,  152,  153,  154,  147,  156,  157,
      155,  158,  160,  163,  149,  159,  162,  151,  154,  153,
      148,  150,  161,  159,  151,  152,  155,  158,  157,  164,
      156,  163,  166,  160,  161,  165,  167,  162,  168,  169,
      166,  170,  172,  165,  161,  174,  172,  171,  182,  164,
      168,  180,  165,  167,  171,  169,  173,  181,  180,  174,
      173,  182,  170,  176,  176,  176,  184,  183,  184,  185,
      186,  188,  190,  181,  176,  176,  187,  176,  183,  189,
      176,  176,  176,  176,  176,  184,  190,  191,  187,  185,

      192,  186,  193,  188,  194,  195,  196,  200,  198,  201,
      189,  199,  191,  202,  193,  201,  199,  203,  204,  209,
      205,  203,  196,  194,  198,  206,  195,  200,  205,  207,
      208,  202,  210,  206,  211,  192,  212,  213,  220,  204,
      209,  207,  215,  216,  212,  214,  217,  218,  222,  216,
      208,  210,  217,  223,  213,  211,  219,  214,  215,  221,
      219,  218,  220,  223,  222,  225,  221,  224,  226,  227,
      228,  221,  233,  231,  230,  221,  229,  224,  228,  232,
      229,   61,   53,  239,  234,  236,  233,  225,  227,  226,
      230,  231,  234,  229,  235,  232,  240,  236,  238,  239,

      241,  242,  235,  240,  238,  243,  244,  245,  241,  246,
      247,  248,  249,  251,  244,  242,  250,  252,  249,  247,
      253,  256,  250,  243,  254,  252,  255,  256,  245,  257,
      246,  254,  248,  258,  251,  255,  253,  259,  260,  257,
      261,  262,  260,  263,  265,  267,  269,  261,  259,  262,
      263,  264,  266,  270,  258,  264,  266,  267,  268,  273,
      265,  268,  270,  274,  271,  272,  269,  271,  272,  275,
      277,  278,  279,  280,  281,  275,  279,  282,  283,  278,
      284,  273,  277,  285,  274,  287,  286,  288,  284,  286,
      288,  280,  289,  281,  282,  290,  291,  292,  293,  283,

      294,  289,  285,  295,  291,  296,  287,  297,  300,  302,
      290,  292,  293,  298,  301,  297,  298,  303,  305,  304,
      301,  294,  306,  308,  295,  309,  296,  304,  307,  300,
      302,  308,  307,  310,  307,  311,  303,  305,  312,  309,
      306,  310,  311,  313,  314,  316,  312,  315,  317,  313,
      319,  318,  314,  320,  315,  318,  322,  320,  321,  323,
      325,  326,  327,  324,  316,  328,  321,  319,  317,  324,
      327,  329,  330,  332,  331,  329,  322,  331,  334,  323,
      325,  333,  326,  335,  334,  336,  328,  337,  338,  336,
       49,   25,  332,  330,   24,  333,   22,   13,    9,    8,

        7,    3,    0,    0,  335,    0,    0,  337,    0,  338,
      340,  340,  340,  340,  341,  341,  342,    0,  342,  342,
      342,  343,  343,  344,    0,  344,  344,  344,  345,    0,
      345,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "my.l"
#define INITIAL 0
#line 2 "my.l"
    #include "parser.tab.h"
    #include <iostream>
	#include <cstdlib>
	// #include "scanner.h"
	// #include "interpreter.h"
	// #include "parser.hpp"
	// #include "location.hh"
	using namespace std;
	#define yyterminate() EzAquarii::Parser::make_END(EzAquarii::location());
	#define YY_USER_ACTION m_driver.increaseLocation(yyleng);
    int count = 1;
    void yyerror(char *);
#line 661 "lex.EzAquarii_.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 45 "my.l"

#line 790 "lex.EzAquarii_.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 340 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 832 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 46 "my.l"
{
                cout << "Scanner: '('" << endl;
                return EzAquarii::Parser::make_LEFTPAR(EzAquarii::location());
            }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 51 "my.l"
{ 
                cout << "Scanner: ')'" << endl;
                return EzAquarii::Parser::make_RIGHTPAR(EzAquarii::location());
            }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 56 "my.l"
{
                cout << "Scanner: ';'" << endl;
                return EzAquarii::Parser::make_SEMICOLON(EzAquarii::location());
            }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "my.l"
{
                cout << "Scanner: ','" << endl;
                return EzAquarii::Parser::make_COMMA(EzAquarii::location());
            }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "my.l"
{count++;return EOL;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 68 "my.l"
{}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "my.l"
{printf("special symbols = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 71 "my.l"
{printf("relation operator = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 72 "my.l"
{printf("logical operator = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 73 "my.l"
{printf("unary operator = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 74 "my.l"
{printf("bitwise operator = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 75 "my.l"
{printf("comment = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 76 "my.l"
{printf("conditional operator = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 77 "my.l"
{printf("assignment oper = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 78 "my.l"
{printf("arithmetic oper= %s in line = %d\n",yytext,count);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 79 "my.l"
{printf("parenthesis = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 80 "my.l"
{printf("keyword = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 81 "my.l"
{printf("array = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 82 "my.l"
{printf("identifier = %s in line = %d\n",yytext,count);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 83 "my.l"
{ yylval.num = atoi(yytext); return NUMBER;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 84 "my.l"
{printf("decimal number constant= %s in line = %d\n",yytext,count);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 85 "my.l"
{printf("character constant= %s in line = %d\n",yytext,count);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 86 "my.l"
{printf("error in %d is %s",count,yytext);} 
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 88 "my.l"
{ return yyterminate(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "my.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1009 "lex.EzAquarii_.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 340 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 340 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 339);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 89 "my.l"


void main(int argc, char **argv)
{
    if (argc > 1){
        for(int i=0;i<argc;i++)
            printf("value of argv[%d] = %s\n\n",i,argv[i]);
            yyin=fopen(argv[1],"r");
    }
    else
    yyin=stdin;
    yylex();
}
/*yywrap is called whenever lex reaches an end-of-file we must define this function because yylex() need it*/
int yywrap(){
    exit(0);
}